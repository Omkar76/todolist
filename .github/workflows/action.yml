name: Auto test L10 solution
on: push
env:
  PG_DATABASE: wd-todo-test
  PG_USER: postgres
  PG_PASSWORD: postgres
jobs:
  # Label of the container job
  run-tests:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:11.7
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wd-todo-test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run unit tests
        run: npm test
      - name: Run the app
        id: run-app
        run: |
          npx sequelize-cli db:drop
          npx sequelize-cli db:create
          npx sequelize-cli db:migrate
          PORT=3000 npm start &
          sleep 5

      - name: Run integration tests
        run: |
          yarn add cypress cypress-json-results
          npx cypress run --env STUDENT_SUBMISSION_URL="http://localhost:3000"

      - name: Run unit tests
        run: npm test
        
  deploy:
    runs-on: ubuntu-latest
    environment: secrets
    steps:
        - name: Deploy to production
          uses: johnbeynon/render-deploy-action@v0.0.8
          with:
            service-id: ${{ secrets.MY_RENDER_SERVICE_ID }}
            api-key: ${{ secrets.MY_RENDER_API_KEY }}

  notify_success_or_fail_to_slack:
    if: ${{always()}}
    environment: secrets


    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    runs-on: ubuntu-latest
    needs: [run-tests, deploy]
    steps:
      - uses: actions/checkout@v2
      - name: set slack message
        run: |
          if [ "${{needs.run-tests.result}}" == "success" ]; then
            TEST_STATUS=":white_check_mark:"
          else
            TEST_STATUS=":x:"
          fi
          if [ "${{needs.deploy.result}}" == "success" ]; then
            DEPLOY_STATUS=":white_check_mark:"
          else
            DEPLOY_STATUS=":x:"
          fi
          SLACK_MESSAGE="Tests - $TEST_STATUS Deploy - $DEPLOY_STATUS"
          echo $SLACK_MESSAGE
          echo "SLACK_MESSAGE=$SLACK_MESSAGE" >> $GITHUB_ENV
      - name: Notify on success or failure
        uses: rtCamp/action-slack-notify@v2
        with:
          status: ${{ job.status }}
          author_name: ${{ github.actor }}
          fields: repo,message,commit,action,eventName,ref,workflow,job,took        